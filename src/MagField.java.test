import java.awt.Dimension;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.GregorianCalendar;
import java.util.concurrent.Semaphore;
import javax.swing.BorderFactory;
import javax.swing.JButton;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JTextField;
import javax.swing.border.Border;
import javax.swing.border.TitledBorder;

public class MagField implements Runnable
{
  static JPanel magFieldOptions;
  static MagField instance;
  JTextField bx;
  JTextField by;
  JTextField bz;
  JTextField w;
  JTextField phi;
  JTextField b1;
  JTextField scale;
  JTextField gstar;
  JButton animate;
  JButton reset;
  JLabel w0;
  double w0Value;
  public static final double HBAR = .0000000000000000000000000000000001054571628;
  public static final double MUB = .00000000000000000000000927400949;
  static Semaphore pause;
  static boolean animationInProgress = false;
  static boolean isPaused = false;

  public MagField()
  {
    instance = this;
    Border eborder = BorderFactory.createEtchedBorder();
    Border tborder = new TitledBorder(eborder, "Magnetic Field Control", TitledBorder.LEFT,
        TitledBorder.TOP);
    pause = new Semaphore(1, true);
    magFieldOptions = new JPanel();
    magFieldOptions.setLayout(new GridBagLayout());
    magFieldOptions.setMinimumSize(new Dimension(200, 190));
    magFieldOptions.setPreferredSize(new Dimension(200, 190));
    magFieldOptions.setMaximumSize(new Dimension(400, 190));
    GridBagConstraints con = new GridBagConstraints();
    con.gridx = 1;
    con.gridy = 0;
    magFieldOptions.add(new JLabel("Bx"), con);
    con.gridx = 2;
    con.gridy = 0;
    bx = new JTextField(5);
    bx.setText("0");
    magFieldOptions.add(bx, con);
    con.gridx = 1;
    con.gridy = 1;
    magFieldOptions.add(new JLabel("By"), con);
    con.gridx = 2;
    con.gridy = 1;
    by = new JTextField(5);
    by.setText("0");
    magFieldOptions.add(by, con);
    con.gridx = 1;
    con.gridy = 2;
    magFieldOptions.add(new JLabel("Bz"), con);
    con.gridx = 2;
    con.gridy = 2;
    bz = new JTextField(5);
    bz.setText("0");
    bz.addActionListener(new ActionListener()
    {
      public void actionPerformed(ActionEvent ae)
      {
        MagField.getInstance().updateW0();
      }
    });
    magFieldOptions.add(bz, con);
    con.gridx = 3;
    con.gridy = 0;
    magFieldOptions.add(new JLabel("B1"), con);
    con.gridx = 4;
    con.gridy = 0;
    b1 = new JTextField(5);
    b1.setText("0");
    magFieldOptions.add(b1, con);
    con.gridx = 3;
    con.gridy = 1;
    magFieldOptions.add(new JLabel("omega"), con);
    con.gridx = 4;
    con.gridy = 1;
    w = new JTextField(5);
    w.setText("0");
    magFieldOptions.add(w, con);
    con.gridx = 3;
    con.gridy = 2;
    magFieldOptions.add(new JLabel("phi"), con);
    con.gridx = 4;
    con.gridy = 2;
    phi = new JTextField(5);
    phi.setText("0");
    magFieldOptions.add(phi, con);
    con.gridx = 1;
    con.gridy = 3;
    magFieldOptions.add(new JLabel("scale"), con);
    con.gridx = 2;
    con.gridy = 3;
    scale = new JTextField(5);
    scale.setText("1");
    magFieldOptions.add(scale, con);
    con.gridx = 3;
    con.gridy = 3;
    magFieldOptions.add(new JLabel("g*"), con);
    con.gridx = 4;
    con.gridy = 3;
    gstar = new JTextField(5);
    gstar.setText("2");
    gstar.addActionListener(new ActionListener()
    {
      public void actionPerformed(ActionEvent ae)
      {
        MagField.getInstance().updateW0();
      }
    });
    magFieldOptions.add(gstar, con);
    con.gridx = 1;
    con.gridy = 4;
    magFieldOptions.add(new JLabel("omega0"), con);
    con.gridx = 2;
    con.gridy = 4;
    w0 = new JLabel("");
    magFieldOptions.add(w0, con);
    updateW0();
    con.gridx = 3;
    con.gridy = 4;
    con.gridwidth = 2;
    JButton useW0 = new JButton("Use Omega0");
    useW0.addActionListener(new ActionListener()
    {
      public void actionPerformed(ActionEvent ae)
      {
        MagField.getInstance().w.setText(Double.toString(MagField.getInstance().w0Value));
      }
    });
    magFieldOptions.add(useW0, con);
    con.gridx = 1;
    con.gridy = 5;
    con.gridwidth = 2;
    con.fill = GridBagConstraints.HORIZONTAL;
    animate = new JButton("Start");
    animate.addActionListener(new ActionListener()
    {
      public void actionPerformed(ActionEvent ae)
      {
        if (!animationInProgress)
        {
          animationInProgress = true;
          MagField.getInstance().animate.setText("Pause");
          new Thread(MagField.getInstance()).start();
        }
        else
        {
          if (isPaused)
          {
            isPaused = false;
            pause.release();
            MagField.getInstance().animate.setText("Pause");
          }
          else
          {
            isPaused = true;
            pause.acquireUninterruptibly();
            MagField.getInstance().animate.setText("Continue");
          }
        }
      }
    });
    magFieldOptions.add(animate, con);
    con.gridx = 3;
    con.gridy = 5;
    con.gridwidth = 2;
    reset = new JButton("Reset");
    reset.addActionListener(new ActionListener()
    {
      public void actionPerformed(ActionEvent ae)
      {
        animationInProgress = false;
        isPaused = false;
        pause.release();
        MagField.getInstance().animate.setText("Start");
      }
    });
    magFieldOptions.add(reset, con);
    magFieldOptions.setBorder(tborder);
  }

  public void updateW0()
  {
    String Bzp = bz.getText();
    double bzVal;
    //JEP myParser = new JEP();
    //myParser.addStandardFunctions();
    //myParser.addStandardConstants();
    //myParser.addVariable("t", 0);
    //myParser.addVariable("w", 0);
    //myParser.parseExpression(Bzp);
    //if (!myParser.hasError())
    //{
    //  bzVal = myParser.getValue();
   // }
    //else
    //{
    //  bzVal = 0;
    //  JOptionPane.showMessageDialog(null, myParser.getErrorInfo(), "Equation Error",
    //      JOptionPane.ERROR_MESSAGE);
    //}
    Double newW0 = new Double(0.0);//getGstar() * MagField.MUB / MagField.HBAR * bzVal);
    w0Value = newW0.doubleValue();
    String w0Str = newW0.toString();
    int Eidx = w0Str.indexOf("E");
    String newStr = "";
    if (Eidx != -1)
    {
      if (Eidx > 4)
      {
        newStr = w0Str.substring(0, 4);
      }
      else
      {
        newStr = w0Str;
      }
      newStr = newStr + w0Str.substring(Eidx);
    }
    else
    {
      if (w0Str.length() > 4)
      {
        newStr = w0Str.substring(0, 4);
      }
      else
      {
        newStr = w0Str;
      }
    }
    w0.setText(newStr);
  }

  public JPanel getPanel()
  {
    return magFieldOptions;
  }

  public double getBx()
  {
    double ret = 0;
    try
    {
      ret = Double.parseDouble(bx.getText());
    }
    catch (NumberFormatException e)
    {
      System.out.println("Bx");
    }
    return ret;
  }

  public double getScale()
  {
    double ret = 0;
    try
    {
      ret = Double.parseDouble(scale.getText());
    }
    catch (NumberFormatException e)
    {
      System.out.println("Scale");
    }
    return ret;
  }

  public double getBy()
  {
    double ret = 0;
    try
    {
      ret = Double.parseDouble(by.getText());
    }
    catch (NumberFormatException e)
    {
      System.out.println("By");
    }
    return ret;
  }

  public double getBz()
  {
    double ret = 0;
    try
    {
      ret = Double.parseDouble(bz.getText());
    }
    catch (NumberFormatException e)
    {
      System.out.println("Bz");
    }
    return ret;
  }

  public double getB1()
  {
    double ret = 0;
    try
    {
      ret = Double.parseDouble(b1.getText());
    }
    catch (NumberFormatException e)
    {
      System.out.println("B1");
    }
    return ret;
  }

  public double getW()
  {
    double ret = 0;
    try
    {
      ret = Double.parseDouble(w.getText());
    }
    catch (NumberFormatException e)
    {
      System.out.println("w");
    }
    return ret;
  }

  public double getPhi()
  {
    double ret = 0;
    try
    {
      ret = Double.parseDouble(phi.getText());
    }
    catch (NumberFormatException e)
    {
      System.out.println("Phi");
    }
    return ret;
  }

  public double getGstar()
  {
    double ret = 0;
    try
    {
      ret = Double.parseDouble(gstar.getText());
    }
    catch (NumberFormatException e)
    {
      System.out.println("g*");
    }
    return ret;
  }

  public boolean isAnimationInProgress()
  {
    return animationInProgress;
  }

  public void run()
  {
    doLarmorProcession();
  }

  public static MagField getInstance()
  {
    return instance;
  }

  public static void doLarmorProcession()
  {
    //JEP myParser = new JEP();
    //myParser.addStandardFunctions();
    //myParser.addStandardConstants();
    GregorianCalendar cal = new GregorianCalendar();
    long frameStart;
    long frameEnd;
    long frameTime;
    double t = 0;
    // the angle the rotating mag field makes with the x axis
    double Bphi = MagField.getInstance().getPhi();
    // the rotating frequency of the rotating mag field
    double Bw = MagField.getInstance().getW();
    // the scaling factor for time. if scale = Bw, the mag field
    // will make 1 full rotation around the z axis in 2 real life seconds
    double scale = MagField.getInstance().getScale();
    // some constant. I should probably figure out what it is and put
    // its name in the comment here.
    // I can hear the future laughing now...
    double gstar = MagField.getInstance().getGstar();
    // the static magnetic field components
    // double Bx = MagField.getInstance().getBx();
    // double By = MagField.getInstance().getBy();
    // double Bz = MagField.getInstance().getBz();
    String Bxp = MagField.getInstance().bx.getText();
    String Byp = MagField.getInstance().by.getText();
    String Bzp = MagField.getInstance().bz.getText();
    // the strength of the rotating magnetic field
    // double B1 = MagField.getInstance().getB1();
    double B1;
    String B1p = MagField.getInstance().b1.getText();
    // The strength of the total magnetic field (static + rotating)
    // at a given time
    double Bxeff;
    double Byeff;
    double Bzeff;
    // the cartesian coordinates of the qbit
    double qx;
    double qy;
    double qz;
    // radius of the qbit, used for normalization
    double qr;
    // the spherical coordinates of the qbit (radius = 1)
    double qphi;
    double qtheta;
    // the amount the caresian coordinates will change based on this time
    // interval
    double dx[][] = new double[Bloch3D.NUM_QBITS][5];
    double dy[][] = new double[Bloch3D.NUM_QBITS][5];
    double dz[][] = new double[Bloch3D.NUM_QBITS][5];
    double qxratio;
    Qbit q;
    if (!B1p.equals("") && !B1p.equals("0"))
    {
      Bloch3D.magFieldArrow.setVisible(true);
    }
    while (MagField.getInstance().isAnimationInProgress())
    {
      pause.acquireUninterruptibly();
      frameStart = cal.getTimeInMillis();
      // calculate Bxeff and Byeff for this time
      //myParser.addVariable("t", t * Math.PI / scale);
      //myParser.addVariable("w", Bw);
      //myParser.parseExpression(B1p);
      //if (myParser.hasError())
      //{
      //  JOptionPane.showMessageDialog(null, myParser.getErrorInfo(), "Equation Error",
      //      JOptionPane.ERROR_MESSAGE);
      //}
      //B1 = myParser.getValue();
      //myParser.parseExpression(Bxp);
      //if (myParser.hasError())
      //{
      // JOptionPane.showMessageDialog(null, myParser.getErrorInfo(), "Equation Error",
      //      JOptionPane.ERROR_MESSAGE);
      //}
      //Bxeff = myParser.getValue() + B1 * Math.cos(Bphi);
      //myParser.parseExpression(Byp);
      //if (myParser.hasError())
      //{
      // JOptionPane.showMessageDialog(null, myParser.getErrorInfo(), "Equation Error",
      //      JOptionPane.ERROR_MESSAGE);
      //}
      //Byeff = myParser.getValue() + B1 * Math.sin(Bphi);
      //myParser.parseExpression(Bzp);
      //if (myParser.hasError())
     // {
      //  JOptionPane.showMessageDialog(null, myParser.getErrorInfo(), "Equation Error",
      //      JOptionPane.ERROR_MESSAGE);
     // }
      //Bzeff = myParser.getValue();
      // Bxeff = Bx + B1 * Math.cos(Bphi);
      // Byeff = By + B1 * Math.sin(Bphi);
      // Bzeff = Bz;
      for (int i = 0; i < Bloch3D.NUM_QBITS; ++i)
      {
        q = Bloch3D.qbits[i];
        // decompose qbit into x, y, and z components
        qphi = q.getPhi() / 180 * Math.PI;
        qtheta = q.getTh() / 180 * Math.PI;
        qx = Math.cos(qphi) * Math.sin(qtheta);
        qy = Math.sin(qphi) * Math.sin(qtheta);
        qz = Math.cos(qtheta);
        // calculate dx, dy, and dz for this t qbit
        //dx[i][0] = -gstar * MagField.MUB / MagField.HBAR * (qy * Bzeff - qz * Byeff);
        //dy[i][0] = -gstar * MagField.MUB / MagField.HBAR * (qz * Bxeff - qx * Bzeff);
        //dz[i][0] = -gstar * MagField.MUB / MagField.HBAR * (qx * Byeff - qy * Bxeff);
        // add dx, dy, and dz. The formula used is the 4th order Adam-Bashforth
        // transform
        // which should be more accurate than the previously used Forward Euler
        // Transform
        if (t > .04)
        {
          qx += .01
              * Math.PI
              / scale
              / 720
              * (1901 * dx[i][0] - 2774 * dx[i][1] + 2616 * dx[i][2] - 1274 * dx[i][3] + 251 * dx[i][4]);
          qy += .01
              * Math.PI
              / scale
              / 720
              * (1901 * dy[i][0] - 2774 * dy[i][1] + 2616 * dy[i][2] - 1274 * dy[i][3] + 251 * dy[i][4]);
          qz += .01
              * Math.PI
              / scale
              / 720
              * (1901 * dz[i][0] - 2774 * dz[i][1] + 2616 * dz[i][2] - 1274 * dz[i][3] + 251 * dz[i][4]);
        }
        else
        {
          qx += .01 * Math.PI / scale * dx[i][0];
          qy += .01 * Math.PI / scale * dy[i][0];
          qz += .01 * Math.PI / scale * dz[i][0];
        }
        // move the dx values up 1 time value
        for (int j = 4; j > 0; --j)
        {
          dx[i][j] = dx[i][j - 1];
          dy[i][j] = dy[i][j - 1];
          dz[i][j] = dz[i][j - 1];
        }
        // renormalize qbit
        qr = Math.sqrt(qx * qx + qy * qy + qz * qz);
        qx /= qr;
        qy /= qr;
        qz /= qr;
        // System.out.println(qx + " " + qy + " " + qz + " " + qr);
        // update qbit
        if (qz > 1)
          qz = 1;
        if (qz < -1)
          qz = -1;
        qtheta = Math.acos(qz);
        if (qtheta == 0 || qtheta == Math.PI)
        {
          qphi = 0;
        }
        else
        {
          // we do this to prevent rounding errors from getting
          // qx/Math.sin(qtheta) just slightly
          // outside the domain of acos.
          qxratio = qx / Math.sin(qtheta);
          if (qxratio > 1)
            qxratio = 1;
          if (qxratio < -1)
            qxratio = -1;
          if (qy / Math.sin(qtheta) >= 0)
          {
            qphi = Math.acos(qxratio);
            // System.out.println("qx " + qx + " sin(qtheta) " +
            // Math.sin(qtheta) + " qx/sin(qtheta) " + qx/Math.sin(qtheta));
          }
          else
          {
            qphi = 2 * Math.PI - Math.acos(qxratio);
            // System.out.println("qx " + qx + " sin(qtheta) " +
            // Math.sin(qtheta) + " qx/sin(qtheta) " + qx/Math.sin(qtheta));
          }
        }
        // System.out.println("phi " + qphi + " qtheta " + qtheta + "\n");
        q.setThetaPhi(qtheta / Math.PI * 180, qphi / Math.PI * 180);
      }
      // calculate and apply dphi
      Bphi += Bw * Math.PI * .01 / scale;
      if (Bphi > 2 * Math.PI)
        Bphi -= 2 * Math.PI;
      // update the mag field arrow
      Bloch3D.magFieldArrow.setThetaPhi(90, Bphi / Math.PI * 180);
      //System.out.println(Bzeff);
      //System.out.println(Bxeff);
      //System.out.println(Byeff);
      //System.out.println(B1 * Math.cos(Bphi));
      t += .01;
      pause.release();
      frameEnd = cal.getTimeInMillis();
      frameTime = frameStart - frameEnd;
      try
      {
        if (frameTime <= 10)
        {
          Thread.sleep(11 - frameTime);
        }
        else
        {
          Thread.sleep(1);
        }
      }
      catch (Exception e)
      {
        System.out.println("animation");
      }
    }
    Bloch3D.magFieldArrow.setVisible(false);
  }
}